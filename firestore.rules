rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isTestEnvironment() {
      return request.auth.token.email != null && 
             request.auth.token.email.matches('.*test.*');
    }

    function userExists(userId) {
      return exists(/databases/$(database)/documents/users/$(userId));
    }

    function validateUserReference(userId) {
      return userId is string && userExists(userId);
    }

    function isValidEmail(email) {
      return email is string && 
             email.matches('^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$');
    }

    function isValidJson(content) {
      return content is string && 
             content.matches('^[{].*[}]$') && 
             content.size() < 1048576; // Max 1MB
    }

    function hasRequiredFields(data, fields) {
      return data.keys().hasAll(fields);
    }

    function hasValidTimestamps(data) {
      let timestamps = ['createdAt', 'updatedAt'];
      return data.keys().hasAll(timestamps) && 
             data.createdAt is timestamp && 
             data.updatedAt is timestamp;
    }

    // Allow all access in test environment
    match /{document=**} {
      allow read, write: if isTestEnvironment();
    }

    // Users Collection
    match /users/{userId} {
      allow read: if request.auth.uid == userId;
      allow create: if request.auth.uid == userId && 
                   hasRequiredFields(request.resource.data, ['email']) &&
                   isValidEmail(request.resource.data.email) &&
                   hasValidTimestamps(request.resource.data);
      allow update: if request.auth.uid == userId && 
                   (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['email']) || 
                   isValidEmail(request.resource.data.email)) &&
                   hasValidTimestamps(request.resource.data);
    }

    // Profiles Collection
    match /profiles/{userId} {
      allow read: if request.auth.uid == userId;
      allow write: if request.auth.uid == userId && 
                   validateUserReference(userId) &&
                   hasValidTimestamps(request.resource.data) &&
                   (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['createdAt']) || 
                   request.resource.data.createdAt == resource.data.createdAt);
    }

    // Templates Collection
    match /templates/{templateId} {
      allow read: if true;
      allow create: if request.auth.token.isAdmin == true &&
                   hasRequiredFields(request.resource.data, ['content', 'title', 'type']) &&
                   isValidJson(request.resource.data.content) &&
                   hasValidTimestamps(request.resource.data);
      allow update: if request.auth.token.isAdmin == true &&
                   (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['content']) || 
                   isValidJson(request.resource.data.content)) &&
                   hasValidTimestamps(request.resource.data) &&
                   request.resource.data.createdAt == resource.data.createdAt;
    }

    // Onboarding Submissions Collection
    match /onboarding_submissions/{submissionId} {
      allow read: if request.auth.uid == resource.data.userId;
      allow create: if request.auth.uid == request.resource.data.userId &&
                   validateUserReference(request.resource.data.userId) &&
                   hasRequiredFields(request.resource.data, ['userId', 'responses']) &&
                   hasValidTimestamps(request.resource.data);
      allow update: if request.auth.uid == resource.data.userId &&
                   validateUserReference(request.resource.data.userId) &&
                   hasRequiredFields(request.resource.data, ['userId', 'responses']) &&
                   hasValidTimestamps(request.resource.data) &&
                   request.resource.data.createdAt == resource.data.createdAt;
    }

    // Questionnaire Submissions Collection
    match /questionnaire_submissions/{submissionId} {
      allow read: if request.auth.uid == resource.data.userId;
      allow create: if request.auth.uid == request.resource.data.userId &&
                   validateUserReference(request.resource.data.userId) &&
                   hasRequiredFields(request.resource.data, ['userId', 'responses']) &&
                   hasValidTimestamps(request.resource.data);
      allow update: if request.auth.uid == resource.data.userId &&
                   validateUserReference(request.resource.data.userId) &&
                   hasRequiredFields(request.resource.data, ['userId', 'responses']) &&
                   hasValidTimestamps(request.resource.data) &&
                   request.resource.data.createdAt == resource.data.createdAt;
    }

    // Submissions Collection
    match /submissions/{submissionId} {
      allow read: if request.auth != null && 
                 (request.auth.uid == resource.data.uid || 
                  request.auth.token.admin == true);
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.uid &&
                   hasValidTimestamps(request.resource.data);
      allow update: if request.auth != null && 
                   (request.auth.uid == resource.data.uid || 
                    request.auth.token.admin == true) &&
                   hasValidTimestamps(request.resource.data);
      allow delete: if request.auth != null && 
                   (request.auth.uid == resource.data.uid || 
                    request.auth.token.admin == true);
    }
  }
}
