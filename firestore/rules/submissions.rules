rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if user exists
    function userExists(userId) {
      return exists(/databases/$(database)/documents/users/$(userId));
    }

    // Helper function to check if template exists
    function templateExists(templateId) {
      return exists(/databases/$(database)/documents/templates/$(templateId));
    }

    // Helper function to validate status transition
    function isValidStatusTransition(currentStatus, newStatus) {
      let validTransitions = {
        'in_progress': ['completed'],
        'completed': ['archived'],
        'archived': []
      };
      return currentStatus in validTransitions 
        && (newStatus in validTransitions[currentStatus] 
            || newStatus == currentStatus);
    }

    // Helper function to validate submission data
    function isValidSubmissionData(data) {
      return data.size() > 0 
        && 'userId' in data 
        && 'templateId' in data 
        && 'status' in data 
        && 'responses' in data;
    }

    // Helper function to validate submission update
    function isValidSubmissionUpdate(currentData, newData) {
      let hasValidStatus = !('status' in newData) || 
        isValidStatusTransition(currentData.status, newData.status);
      
      let hasValidTemplateId = !('templateId' in newData) || 
        (isAdmin() && templateExists(newData.templateId));
      
      return hasValidStatus && hasValidTemplateId;
    }

    match /submissions/{submissionId} {
      // Allow read if user owns the submission or is admin
      allow read: if request.auth != null && (
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );

      // Allow create with validation
      allow create: if request.auth != null
        && isValidSubmissionData(request.resource.data)
        && (
          // User can only create their own submissions
          request.resource.data.userId == request.auth.uid ||
          isAdmin()
        )
        && userExists(request.resource.data.userId)
        && templateExists(request.resource.data.templateId)
        && request.resource.data.status == 'in_progress'
        && request.resource.data.responses is map;

      // Allow update with validation
      allow update: if request.auth != null
        && (
          // User can only update their own submissions
          resource.data.userId == request.auth.uid ||
          isAdmin()
        )
        && isValidSubmissionUpdate(resource.data, request.resource.data)
        && (
          // Prevent changing userId
          !('userId' in request.resource.data) ||
          request.resource.data.userId == resource.data.userId
        );

      // Allow list/query with proper indexes
      allow list: if request.auth != null && (
        // Users can only query their own submissions
        request.query.filters.userId == request.auth.uid ||
        isAdmin()
      );

      // Prevent delete operations
      allow delete: if false;
    }

    // Rules for version history subcollection
    match /submissions/{submissionId}/version_history/{versionId} {
      allow read: if request.auth != null && (
        get(/databases/$(database)/documents/submissions/$(submissionId)).data.userId == request.auth.uid ||
        isAdmin()
      );
      
      // Only allow creates, no updates or deletes
      allow create: if request.auth != null && (
        get(/databases/$(database)/documents/submissions/$(submissionId)).data.userId == request.auth.uid ||
        isAdmin()
      );
      
      allow update, delete: if false;
    }
  }
}
